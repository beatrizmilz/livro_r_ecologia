[["base-r.html", "Capítulo 2 Pré-requisitos 2.1 Introdução 2.2 R e RStudio 2.3 Funcionamento da linguagem R 2.4 Estrutura e manipulação de objetos 2.5 Exercícios 2.6 Para se aprofundar", " Capítulo 2 Pré-requisitos 2.1 Introdução O objetivo desta seção é apresentar os aspectos básicos da linguagem R para que qualquer pessoa possa realizar os principais passos para a análise de dados utilizando essa linguagem. Abordaremos aqui as questões básicas sobre a linguagem R, como: 1) R e RStudio, 2) funcionamento da linguagem, 3) estrutura e manipulação de objetos e 5) principais livros e material para se aprofundar nos seus estudos. Todo processo de aprendizagem torna-se mais efetivo quando a teoria é combinada com a prática, então recomendamos fortemente que você leitor(a), acompanhe os códigos e exercícios deste livro, ao mesmo tempo que os executa em seu computador, e não só os leia passivamente. Por motivos de espaço, não abordaremos todas as questões relacionadas ao uso da linguagem R nesta seção. Logo, aconselhamos que o leitor(a) consulte o material sugerido no final desta seção para se aprofundar. 2.2 R e RStudio Com o R, é possível manipular, analisar e visualizar dados, além de escrever desde pequenas linhas de códigos até programas inteiros. O R é a versão em código aberto de uma linguagem de programação criada por John M. Chambers (Stanford University, CA, EUA) nos anos 1980 no Bell Labs, chamada de S, que contou com três versões: Old S (1976-1987), New S (1988-1997) e S4 (1998), utilizada na IDE S-PLUS (1988-2008). Essa linguagem tornou-se bastante popular e vários produtos comerciais que a usam estão disponíveis, como o S-PLUS, SPSS, STATA e SAS. No final dos anos 1990, Robert Gentleman e Ross Ihaka (Auckland University, NZ), iniciaram o desenvolvimento da versão free da linguagem S, com o seguinte histórico: Desenvolvimento (1997-2000), Versão 1 (2000-2004), Versão 2 (2004-2013), Versão 3 (2013-2020) e Versão 4 (2020). Para mais detalhes do histório de desenvolvimento das linguagens S e R, consultar Wickham (2013), sendo que atualmente a linguagem R é mantida por uma rede de colaboradores denominada R Core Team. A origem do nome R é desconhecida, mas reza que ao lançarem o nome da linguagem, os autores se valeram da letra que vinha antes do S, uma vez que a linguagem R foi baseada nela, e utilizaram a letra “R.” Um aspecto digno de nota é que a linguagem R é uma linguagem interpretada, ao contrário de outras linguagem como Fortran e C que são compiladas. Isso a faz ser mais fácil de programar, pois processa linhas de comando e as transforma em linguagem de máquina (código binário que o computador efetivamente lê), apesar desse fato diminuir a velocidade de processamento. Para começarmos a trabalhar com o R é necessário baixá-lo na página do R Project. Então, acesse esse site, e em seguida, clique no link download R, que o levará à pagina do CRAN Mirros (Comprehensive R Archive Network). Escolha a página espelho do Brasil mais próxima de você para baixar o programa. Escolha agora o sistema operacional do seu computador (passos adicionais existem para diferentes distribuições Linux), para Windows, clique em base para finalmente chegar à página de download com a versão mais recente do R. Reserve algum tempo para explorar esta página do R-Project. Existem vários livros dedicados a diversos assuntos baseados no R. Além disso, estão disponíveis manuais em diversas línguas para serem baixados gratuitamente. Como o R é um software livre não existe a possibilidade de o usuário entrar em contato com um serviço de suporte de usuários, muito comuns em softwares pagos. Ao invés disso, existem várias listas de emails que fornecem suporte à comunidade de usuários. Nós, particularmente, recomendamos o ingresso nas seguintes listas: R-help, R-sig-ecology, e R-br. Este último representa um grupo de pessoas usuárias brasileiras do programa R. Apesar de podemos utilizar o R com a IDE (Ambiente de Desenvolvimento Integrado - Integrated Development Environment) RGui que vem com a instalação da linguagem para usuários Windows (Figura 2.1) ou no próprio terminal para usuários Linux e MacOS, existem alguns IDEs específicos para facilitar nosso uso dessa linguagem. Figura 2.1: Interface do RGui. Os números indicam: (1) R Script, (2) R Console, e (3) R Graphics. Entretanto, desde 2011, um IDE se tornou mais popular na comunidade de usuários(as) de R: o RStudio (Figura 2.2). O RStudio possui algumas características que o tornam tão popular: várias janelas de visualização, marcação e preenchimento automático do script, integração com controle de versão, dentre outras funcionalidades. Para fazer o download do RStudio, acessamos o site, e escolhemos o instalador com base em nosso sistema operacional. Um último ponto técnico importante: para evitar possíveis erros, é importante instalar primeiro a linguagem R, seguida do IDE RStudio. 2.3 Funcionamento da linguagem R Nesta seção, veremos o principais conceitos para entender como a linguagem R funciona ou como geralmente utilizamos o IDE RStudio no dia a dia, para executar nossas rotinas utilizando a linguagem R. Veremos então: 1) console, 2) script, 3) operadores, 4) objetos, 5 ) funções, 6) pacotes, 7) ajuda (help), 8) ambiente (environment/workspace), 9) citações e 10) principais erros. Antes de iniciarmos propriamente dito, é fundamental entendermos alguns pontos sobre as janelas e o funcionamento delas no RStudio (Figura 2.2). Figura 2.2: Interface do RStudio. Os números indicam: (1) janela com abas de Script, R Markdown, dentre outras; (2) janela com abas de Console, Terminal e Jobs; (3) janela com abas de Environment, History, Conections e Tutorial; e (4) janela com abas de Files, Plots, Packages, Help e Viewer. Detalhando algumas dessas janelas e abas, temos: Console: painel onde os códigos são rodados e vemos as saídas Editor/Script: painel onde escrevemos nossos códigos em R, R Markdown ou outro formato Environment: painel com todos os objetos criados na sessão History: painel com o histórico dos códigos rodados Files: painel que mostra os arquivos no diretório de trabalho Plots: painel onde os gráficos são apresentados Packages: painel que lista os pacotes Help: painel onde a documentação das funções é exibida No RStudio, alguns atalhos são fundamentais para aumentar nossa produtividade: f1: abre o painel de Help quando digitado em cima de uma função ctrl + Enter: roda a linha de código selecionada no script ctrl + Shift + N: abre um novo script ctrl + S: salva um script ctrl + Z: desfaz uma operação ctrl + shift + Z: refaz uma operação alt + -: insere um sinal de atribuição (&lt;-) ctrl + Shift + M: insere um operador pipe (%&gt;%) ctrl + Shift + C: comenta uma linha no script - insere um (#) ctrl + Shift + R: insere uma sessão (# ———————-) ctrl + Shift + H: abre uma janela para selecionar o diretório de trabalho ctrl + Shift + f10: reinicia o console ctrl + L: limpa os códigos do console alt + Shift + K: abre uma janela com todos os atalhos disponíveis 2.3.1 Console O console é onde a versão da linguagem R instalada é carregada para executar os códigos da linguagem R (Figura 2.2 (2)). Na janela do console irá aparecer o símbolo &gt; seguida de uma barra vertical | que fica piscando, onde iremos digitar ou enviar nossos códigos do script. Podemos fazer um pequeno exercício: vamos digitar 10 + 2, seguido da tecla Enter para que essa operação seja executada. 10 + 2 ## [1] 12 O resultado retorna o valor 12, precedido de um valor entre colchetes. Esses colchetes demonstram a posição do elemento numa sequência de valores. Se fizermos essa outra operação 1:42, o R vai criar uma sequência unitária de valores de 1 a 42. A depender da largura da janela do console, vai aparecer um número diferente entre colchetes indicando sua posição na sequência: antes do 1 vai aparecer o [1], depois quando a sequência for quebrada, vai aparecer o número correspondente da posição do elemento, no nosso caso [26]. 1:42 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 Podemos ver o hitórico dos código executados no Console na aba History (Figura 2.2 (3)). 2.3.2 Scripts Scripts são rascunhos dos códigos e onde de fato os códigos são escritos e depois enviados ao console (Figura 2.2 (1)). Scripts são arquivos de texto simples, criados com a extensão (terminação) .R (ative a visualização da extensão de arquivos para ver). Para criar um script, basta ir em File &gt; New File &gt; R Script, ou clicando no ícone logo abaixo de File, ou ainda usando o atalho ctrl + shift + N. Uma vez escrito os códigos no script, podemos rodar esses códigos de duas formas: 1) todo o script de uma vez, clicando em Source ou usando o atalho ctrl + shift + enter; ou 2) apenas a linha onde o cursor estiver posicionado, independente de sua posição naquela linha, clicando em Run ou usando o atalho ctrl + enter. Devemos sempre salvar nossos scripts, tomando por via de regra: primeiro criar o arquivo e depois ir salvando nesse mesmo arquivo à cada passo de desenvolvimento das análises (não é raro o R fechar sozinho e você perder algum tempo de trabalho…). Há diversos motivos para criar um script: continuar o desenvolvimento do mesmo em outro momento ou em outro computador, preservar trabalhos passados, ou ainda compartilhar seus códigos com outra pessoa. Para criar ou salvar um script basta ir em File &gt; Save, escolher um diretório e nome para o script e salvar. Podemos ainda utilizar o atalho ctrl + S. Em relação aos scripts, ainda há os comentários, representados pelos símbolos # (hash) ou #' (hash-linha). Comentários não são lidos pelo console do R e são utilizados geralmente para: 1) descrever informações sobre dados ou funções e/ou 2) suprimir linhas de código. É interessante ter no início de cada script um cabeçalho identificando o objetivo ou análise, autor e data para facilitar o compartilhamento e reprodutibilidade. #&#39; --- #&#39; title: capitulo 01 - introducao ao r #&#39; author: mauricio vancine #&#39; date: 2021-03-11 #&#39; --- Além disso, podemos usar comentários para adicionar informações sobre os códigos. # comentarios # o r nao le o codigo depois do # (hash) 42 # essas palavras nao sao executadas, apenas o 42, a resposta de tudos ## [1] 42 Um ponto muito importante é tentar escrever os comentários sempre em inglês para tornar seu código mais reprodutível possível. Por fim, outro ponto fundamental é ter boas práticas de estilo de código. Quanto mais organizado e padronizado estiver os scripts, mais fácil de entendê-los e de procurar possíveis erros. Existem dois guias de boas práticas para adequadar seus scripts: Hadley Wickham e Google. 2.3.3 Operadores No R, temos cinco tipos de operadores: aritméticos, relacionais, lógicos, atribuição e diversos. Grande parte deles são descritos na Tabela 2.1. Tabela 2.1: Operadores no R. Operador Tipo Descrição + Aritmético Adição - Aritmético Subtração * Aritmético Multiplicação / Aritmético Divisão %% Aritmético Resto da divisão %/% Aritmético Divisão inteira ^ ou ** Aritmético Expoente &gt; Relacional Maior &lt; Relacional Menor &gt;= Relacional Maior ou igual &lt;= Relacional Menor ou igual == Relacional Igualdade != Relacional Diferença ! Lógico Lógico NÃO &amp; Lógico Lógico elementar E | Lógico Lógico elementar OU &amp;&amp; Lógico Lógico E || Lógico Lógico OU &lt;- ou = Atribuição Atribuição à esquerda &lt;&lt;- Atribuição Super atribuição à esquerda -&gt; Atribuição Atribuição à direita -&gt;&gt; Atribuição Super atribuição à direita : Diversos Sequência unitária %in% Diversos Elementos que pertencem a um vetor %*% Diversos Multiplar matriz com sua transposta %&gt;% Diversos pipe %–% Diversos Intervalo de datas Como exemplo, podemos fazer operações simples usando os operadores aritméticos. # operacoes aritmeticas 10 + 2 # adicao ## [1] 12 10 * 2 # multiplicacao ## [1] 20 Precisamos ficar atentos à dominância dos operadores aritméticos: ^ &gt;&gt; * ou / &gt;&gt; + ou -. Veja no exemplo abaixo como o uso dos parênteses muda o resultado. # sem especificar - segue a ordem dos operadores 1 * 2 + 2 / 2 ^ 2 ## [1] 2.5 # especificando - segue a ordem dos parenteses ((1 * 2) + (2 / 2)) ^ 2 ## [1] 9 2.3.4 Objetos Objetos são palavras às quais são atribuídos dados. A atribuição possibilita a manipulação de dados ou resultados de análises. Iremos utilizar os símbolos &lt; (menor), seguido de - (menos), sem espaço, dessa forma &lt;-. Também podemos utilizar o símbolo de igual (=), mas não recomendamos, por não fazer parte das boas práticas de escrita de códigos em R. Podemos inserir essa combinação de símbolos com o atalho alt + -. Para demonstrar, vamos atribuir o valor 10 à palavra obj_10, e chamar esse objeto novamente para verificar seu conteúdo. # atribuicao - simbolo (&lt;-) obj_10 &lt;- 10 obj_10 ## [1] 10 Todos os objetos criados numa sessão do R ficam listados na aba Environment (Figura 2.2 (3)). Além disso, o RStudio possui a função auto complete, ou seja, podemos digitar as primeiras letras de um objeto (ou função) e em seguida apertar Tab para que o RStudio liste tudo que começar com essas letras. Dois pontos importantes sobre atribuições: primeiro, o R sobrescreve os valores dos objetos com o mesmo nome, deixando o objeto com o valor da segunda atribuição. # sobrescreve o valor dos objetos obj &lt;- 100 obj ## [1] 100 # obj agora vale 2 obj &lt;- 2 obj ## [1] 2 Segundo, o R tem limitações ao nomear objetos: nome de objetos só podem começar por letras (a-z ou A-Z) ou pontos (.) nome de objetos só podem conter letras (a-z ou A-Z), números (0-9), underscores (_) ou pontos (.) R é case-sensitive, i.e., ele difere letras maiúsculas de minúsculas. Assim, um objeto chamado “resposta” é diferente do objeto “RESPOSTA” devemos evitar acentos ou cedilha (ç) para facilitar a memorização dos objetos nome de objetos não podem ser iguais a nomes especies (break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while) Podemos ainda utilizar objetos para fazer operações e criar novos objetos. Isso pode parecer um pouco confuso para os iniciantes na linguagem, mas é fundamental aprender essa lógica para passar para os próximos passos. # definir dois objetos va1 &lt;- 10 va2 &lt;- 2 # operacoes com objetos e atribuicao adi &lt;- va1 + va2 adi ## [1] 12 2.3.5 Funções Funções são códigos preparados para realizar uma tarefa especídifca de modo simples. Outra forma de entender uma função é: códigos que realizam operações em argumentos. A estrutura de uma função é muito similar à sintaxe usada em planilhas eletrônicas, sendo composta por: nome_da_funcao(argumento1, argumento2) Nome da função: remete ao que ela faz Parênteses: limitam a função Argumentos: onde a função irá atuar Vírgulas: separam os argumentos Os argumentos de uma função podem ser de dois tipos: Valores ou objetos: a função irá alterar os valores em si ou os valores atribuídos aos objetos Parâmetros: valores fixos que informam um método ou a realização de uma operação. Informa-se o nome desse argumento, seguido de “=” e um número, texto ou TRUE ou FALSE Alguns exemplos de argumentos como valores ou objetos. # funcoes - argumentos como valores # soma sum(10, 2) ## [1] 12 # funcoes - argumentos como objetos # soma sum(va1, va2) ## [1] 12 Alguns exemplos de argumentos como parâmetros. Note que apesar do valor do argumento ser o mesmo (10), seu efeito no resultado muda drasticamente. Aqui também é importante destacar um ponto: 1) podemos informar os argumentos sequencialmente, sem explicitar seus nomes, ou 2) independente da ordem, mas explicitando seus nomes. Entretanto, como no exemplo abaixo, devemos informar o nome do argumento (i.e., parâmetro), para que seu efeito seja o que desejamos. # funcoes - argumentos como parametros # repeticao - repita todos os elementos rep(x = 1:5, times = 10) ## [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 ## [39] 4 5 1 2 3 4 5 1 2 3 4 5 # repeticao - repita cada um dos elementos rep(x = 1:5, each = 10) ## [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 ## [39] 4 4 5 5 5 5 5 5 5 5 5 5 Um ponto fundamental, e que deve ser entendido nesse ponto, é o fluxo de atribuições do resultado da operação de funções a novos objetos. No desenvolvimento de qualquer script n a linguagem R, grande parte da estrutura do mesmo será dessa forma: atribuição de dados &gt; operações com funções &gt; atribuição dos resultados a novos objetos &gt; operações com funções desses novos objetos &gt; atribuição dos resultados a novos objetos….Ao entender esse funcionamento, começamos a entender como devemos pensar na organização do nosso script para montar as análises que precisamos. # atribuicao dos resultados # repeticao rep_times &lt;- rep(x = 1:5, times = 10) rep_times ## [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 ## [39] 4 5 1 2 3 4 5 1 2 3 4 5 # somar e atribuir rep_times_soma &lt;- sum(rep_times) rep_times_soma ## [1] 150 # raiz e atribuir rep_times_soma_raiz &lt;- sqrt(rep_times_soma) rep_times_soma_raiz ## [1] 12.24745 Por fim, é fundamental também entender a origem das funções que usamos no R. Todas as funções são advindas de pacotes. Esses pacotes possuem duas origens. pacotes já instalados por padrão e que são carregados quando abrimos o R (R Base) pacotes que instalamos e carregamos com funções 2.3.6 Pacotes Pacotes são conjunto extras de funções para executar tarefas específicas, além do R Base. Existe literalmente milhares de pacotes para as mais diversas tarefas: estatística, ecologia, geografia, sensoriamento remoto, econometria, ciências sociais, gráficos, machine learning, etc. Podemos verificar este vasto conjunto de pacotes pelo link que lista por nome os pacotes oficiais, ou seja, que passaram pelo crivo do CRAN. Existem ainda muito mais pacotes em desenvolvimento, geralmente disponibilizados em repositórios do GitHub ou GitLab. Primeiramente, com uma sessão do R sem carregar nenhum pacote extra, podemos verificar pacotes carregados pelo R Base utilizando a função search(). # verificar pacotes carregados search() Podemos ainda verificar todos pacotes instalados em seu computador com a função library(). # verificar pacotes instalados library() No R, quando tratamos de pacotes, devemos destacar a diferença de dois conceitos: instalar um pacote e carregar um pacote. A instalação de pacotes possui algumas características: Instala-se um pacote apenas uma vez Precisamos estar conectados à internet O nome do pacote precisa estar entre aspas na função Função (CRAN): install.packages() Vamos instalar o pacote vegan diretamente do CRAN, que possui funções para realizar uma série de análise em ecologia. Para isso, podemos ir em Tools &gt; Install Packages..., ou ir na aba Packages (Figura 2.2 (4)), procurar o pacote e simplesmente clicar em “Install.” Podemos ainda utilizar a função install.packages(). # instalar pacotes install.packages(&quot;vegan&quot;) Podemos conferir em que diretório um pacote será instalado com a função .libPaths(). # diretorio de intalacao dos pacotes .libPaths() ## [1] &quot;/home/mude/R/x86_64-pc-linux-gnu-library/4.1&quot; ## [2] &quot;/usr/local/lib/R/site-library&quot; ## [3] &quot;/usr/lib/R/site-library&quot; ## [4] &quot;/usr/lib/R/library&quot; Uma vez instalado um pacote, não há necessidade de instalá-lo novamente. Entretanto, todas as vezes que iniciarmos uma sessão no R, precisamos carregar os pacotes com as funções que precisamos utilizar. O carregamento de pacotes possui algumas características: Carrega-se o pacote toda vez que se abre uma nova sessão do R Não precisamos estar conectados à internet O nome do pacote não precisa estar entre aspas na função Funções: library() ou require() Vamos carregar o pacote vegan que instalamos anteriormente. Podemos ir na aba Packages (Figura 2.2 (4)) e “ticar” o pacote que queremos carregar ou utilizar a função library(). # carregar pacotes library(vegan) ## Loading required package: permute ## Loading required package: lattice ## This is vegan 2.5-7 Como dissemos anteriormente, alguns pacotes em desenvlvimento encontram-se disponíveis em repositórios do GitHub ou GitLab. Para instalar pacotes do GitHub, por exemplo, precisamos instalar e carregar o pacote devtools. # instalar pacote devtools install.packages(&quot;devtools&quot;) # carregar pacote devtools library(devtools) Uma vez instalado e carregado este pacote, podemos instalar o pacote do GitHub, utilizando a função devtools::install_github(). Precisamos atentar para usar essa forma “nome_usuario/nome_repositorio,” retirados do link do repositório de interesse. Como exemplo, podemos instalar o mesmo pacote vegan do repositório do GitHub vegandevs/vegan, e depois utilizar a função library() para carregá-lo normalmente. # instalar pacote do github devtools::install_github(&quot;vegandevs/vegan&quot;) # carregar pacote do github library(&quot;vegan&quot;) A maioria dos pacotes vêm com bancos de dados que podem ser acessados pela função data(). Esses bancos de dados podem ser usados para testar as funções do pacote. Se estiver com dúvida na maneira como você deve preparar a planilha para realizar uma análise específica, entre no help da função e veja os conjuntos de dados que estão no exemplo desta função. Como exemplo, vamos carregar os dados dune do pacote vegan. # carregar dados de um pacote library(vegan) data(dune) dune[1:6, 1:6] ## Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere ## 1 1 0 0 0 0 0 ## 2 3 0 0 2 0 3 ## 3 0 4 0 7 0 2 ## 4 0 8 0 2 0 2 ## 5 2 0 0 0 4 2 ## 6 2 0 0 0 3 0 Se por algum motivo precisarmos desinstalar um pacote, podemos utilizar a função remove.packages(). Já para descarregar um pacote de uma sessão do R, podemos usar a função detach(). # descarregar um pacote detach(&quot;package:vegan&quot;, unload = TRUE) E um último ponto fundamental sobre pacotes, diz respeito à atualização dos mesmos. Os pacotes são atualizados com frequência, e infelizmente ou felizmente (pois as atualizações podem oferecer algumas quebras entre pacotes), não se atualizam sozinhos. Muitas vezes, a instalação de um pacote pode depender da versão dos pacotes dependentes, e geralmente uma janela se abre perguntando se você quer que todos os pacotes dependentes sejam atualizados. Podemos ir na aba Packages (Figura 2.2 (4)) e clicar em “Update” ou usar a função update.packages(ask = FALSE) para atualizá-los, entretanto, essa é uma função que costuma demorar para terminar de rodar. # atualizacao dos pacotes update.packages(ask = FALSE) 2.3.7 Ajuda (Help) Um importante passo para melhorar a usuabilidade e ter mais familiaridade com a linguagem R é aprender a usar a ajuda de cada função. Para tanto, podemos utilizar a função help() ou o operador ?, depois de ter carregado o pacote, para abrir uma nova aba (Figura 2.2 (4)) que possui diversas informações sobre a função de interesse. O arquivo de ajuda do R possui geralmente nove ou dez tópicos, que nos auxiliam muito no entendimento dos dados de entrada, argumentos e que operações estão sendo realizadas. Description: resumo da função Usage: como utilizar a função e quais os seus argumentos Arguments: detalha os argumentos e como os mesmos devem ser especifidados Details: detalhes importantes para se usar a função Value: mostra como interpretar a saída (output) da função (os resultados) Note: notas gerais sobre a função Authors: autores da função References: referências bibliográficas para os métodos usados para construção da função See also: funções relacionadas Examples: exemplos do uso da função. Às vezes pode ser útil copiar esse trecho e colar no R para ver como funciona e como usar a função. Vamos realizar um exemplo, buscando o help da função aov(), que realiza uma análise de variância. # help help(aov) ?aov Além das funções, podemos buscas detalhes de um pacote em específico, para uma página simples do help utilizando a função help() ou o operador ?. Entretanto, para uma opção que ofereça uma descrição detalhada e um índice de todas as funções do pacote, podemos utilizar a função library(), mas agora utilizando o argumento help, indicando o pacote de interesse entre aspas. # help do pacote help(vegan) ?vegan # help detalhado library(help = &quot;vegan&quot;) Outra ferramenta de busca é a página rseek, na qual é possível buscar por um termo não só nos pacotes do R, mas também em listas de emails, manuais, páginas na internet e livros sobre o programa. 2.3.8 Ambiente (Environment) O ambiente Environment como vimos é onde os objetos criados são armazenados. É fundamental entender que um objeto é uma alocação de um pequeno espaço na memória RAM do seu computador, onde o R armazenará um valor ou o resultado de uma função, utilizando o nome que definimos na atribuição. Sendo assim, se fizermos uma atribuição de um objeto maior que o tamanho da memória RAM, esse objeto não será alocado, e a atribuição não funcionará. Existem opções para contornar esse tipo de limitação, mas não a abordaremos aqui. Entretanto, podemos utilizar a função object.size() para saber quanto espaço nosso objeto criado está alocando de memória RAM. # tamanho de um objeto object.size(adi) ## 56 bytes Podemos listar todos os objetos criados com a função ls() ou objects(). # listar todos os objetos ls() ## [1] &quot;adi&quot; &quot;dune&quot; &quot;obj&quot; ## [4] &quot;obj_10&quot; &quot;rep_times&quot; &quot;rep_times_soma&quot; ## [7] &quot;rep_times_soma_raiz&quot; &quot;va1&quot; &quot;va2&quot; Podemos ainda remover objetos criados com a função rm() ou remove(). Ou ainda fazer uma função composta para remover todos os objetos do Environment. # remover um objeto rm(adi) # remover todos os objetos criados rm(list = ls()) Quando usamos a função ls() agora, nenhum objeto é listado. # listar todos os objetos ls() ## character(0) Toda a vez que fechamos o R os objetos criados são apagados do Environment. Dessa forma, em algumas ocasiões, por exemplo, análises estatísticas que demoram um grande tempo para serem realizadas, pode ser interessante exportar alguns ou todos os objetos criados. Para salvar todo os objetos, ou seja, todo o workspace, podemos ir em Session -&gt; Save Workspace As... e escolher o nome do arquivo do workspace, por exemplo, “meu_workspace.RData.” Podemos ainda utilizar funções para essas tarefas. A função save.image() salva todo workspace com a extensão .RData. # salvar todo o workspace save.image(file = &quot;meu_workspace.RData&quot;) Depois disso, podemos fechar o RStudio tranquilamente, e quando formos trabalhar novamente, carregar os objetos criados indo em Session -&gt; Load Workspace..., ou utilizando a função load(). # carregar todo o workspace load(&quot;meu_workspace.RData&quot;) Entretanto, em algumas ocasiões, não precisamos salvar todos os objetos. Dessa forma, podemos salvar apenas alguns objetos específicos usando a função save(), também com a extensão .RData. # salvar apenas um objeto save(obj1, file = &quot;meu_obj.RData&quot;) # salvar apenas um objeto save(obj1, obj2, file = &quot;meus_objs.RData&quot;) # carregar os objetos load(&quot;meus_objs.RData&quot;) Ou ainda podemos salvar apenas um objeto com a extensão .rds. Para isso, usamos as funções saveRDS() e readRDS(), para exportar e imporatar esses dados, respectivamente. # salvar um objeto para um arquivo saveRDS(obj, file = &quot;meu_obj.rds&quot;) # carregar esse objeto readRDS(file = &quot;meu_obj.rds&quot;) 2.3.9 Citações Ao utilizar o R para realizar alguma análise em nossos estudos, é fundamental a citação do mesmo. Para saber como citar exatamente o R em artigos, existe uma função denominada citation(), que provê um formato genérico de citação e um BibTeX para arquivos LaTeX e R Markdown. # citacao do r citation() ## ## To cite R in publications use: ## ## R Core Team (2021). R: A language and environment for statistical ## computing. R Foundation for Statistical Computing, Vienna, Austria. ## URL https://www.R-project.org/. ## ## A BibTeX entry for LaTeX users is ## ## @Manual{, ## title = {R: A Language and Environment for Statistical Computing}, ## author = {{R Core Team}}, ## organization = {R Foundation for Statistical Computing}, ## address = {Vienna, Austria}, ## year = {2021}, ## url = {https://www.R-project.org/}, ## } ## ## We have invested a lot of time and effort in creating R, please cite it ## when using it for data analysis. See also &#39;citation(&quot;pkgname&quot;)&#39; for ## citing R packages. No resultado dessa função, há uma mensagem muito interessante: “See also ‘citation(“pkgname”)’ for citing R packages.” Dessa forma, aconselhamos os usuários de R a citar também os pacotes que utilizaram em suas análises para dar os devidos créditos aos desenvolvedores das funções implementadas nos pacotes. Como exemplo, vamos ver como fica a citação do pacote vegan. # citacao do pacote vegan citation(&quot;vegan&quot;) ## ## To cite package &#39;vegan&#39; in publications use: ## ## Jari Oksanen, F. Guillaume Blanchet, Michael Friendly, Roeland Kindt, ## Pierre Legendre, Dan McGlinn, Peter R. Minchin, R. B. O&#39;Hara, Gavin ## L. Simpson, Peter Solymos, M. Henry H. Stevens, Eduard Szoecs and ## Helene Wagner (2020). vegan: Community Ecology Package. R package ## version 2.5-7. https://CRAN.R-project.org/package=vegan ## ## A BibTeX entry for LaTeX users is ## ## @Manual{, ## title = {vegan: Community Ecology Package}, ## author = {Jari Oksanen and F. Guillaume Blanchet and Michael Friendly and Roeland Kindt and Pierre Legendre and Dan McGlinn and Peter R. Minchin and R. B. O&#39;Hara and Gavin L. Simpson and Peter Solymos and M. Henry H. Stevens and Eduard Szoecs and Helene Wagner}, ## year = {2020}, ## note = {R package version 2.5-7}, ## url = {https://CRAN.R-project.org/package=vegan}, ## } ## ## ATTENTION: This citation information has been auto-generated from the ## package DESCRIPTION file and may need manual editing, see ## &#39;help(&quot;citation&quot;)&#39;. 2.3.10 Principais erros de iniciantes Errar quando se está iniciando com R é muito comum e faz parte do aprendizado. Entretanto, os erros nunca devem ser encarados como uma forma de desestímulo para continuar tentando. Todos nós, autores desse livro, e provavelmente usuários mais ou menos experientes, já passaram por um momento em que se quer desistir de tudo. Jovem aprendiz de R, a única diferença entre você que está iniciando agora e nós que usamos há mais tempo são as horas a mais de uso (e raiva). O que temos a mais é experiência para olhar o erro, lê-lo e conseguir interpretar o que está errado. Dessa forma, o ponto mais importante de quem está iniciando é ter paciência, calma, bom humor, ler e entender a mensagem de erro. Iremos listar aqui o que consideramos os princiais erros dos iniciantes no R. 1. Esquecer de completar uma função ou bloco de códigos Esquecer de completar uma função ou bloco de códigos é algo bem comum. Geralmente esquecemos de fechar aspas \"\" ou parênteses (), mas felizmente geralmente o R nos informa isso, indicando um símbolo de +. ` sum(1, 2 + ## Error: &lt;text&gt;:3:0: unexpected end of input ## 1: sum(1, 2 ## 2: + ## ^ 2. Esquecer da vírgula Outro erro bastante comum é esquecer de acrescentar a vírgula , para separar argumentos dentro de uma função, principalmente se estamos compondo várias função acopladas, i.e., uma função dentro da outra. sum(1 2) ## Error: &lt;text&gt;:1:7: unexpected numeric constant ## 1: sum(1 2 ## ^ 3. Chamar um objeto errado Pode parecer simples, mas esse é de longe o erro mais comum que pessoas iniciantes comentem. Quando temos um longo script, é de se esperar que fomos atribundo diversos objetos e em algum momento atribuímos um nome do qual não lembramos. Dessa forma, quando chamamos o objeto ele não existe e devolve um erro. Entretanto, esse tipo de erro pode ser facilmente identificado, como o exemplo abaixo. obj &lt;- 10 OBJ ## Error in eval(expr, envir, enclos): object &#39;OBJ&#39; not found 4. Esquecer de carregar um pacote Esse também é um erro recorrente, mesmo para usuários mais experientes. Em scripts de análises complexas, que requerem vários pacotes, geralmente esquecemos de um ou outro… A melhor forma de evitar esse tipo de erro é listar o pacotes que vamos precisar usar logo no início do script. # carregar dados data(dune) # funcao do pacote vegan decostand(dune, &quot;hell&quot;) ## Error in decostand(dune, &quot;hell&quot;): could not find function &quot;decostand&quot; Geralmente a mensagem de erro será de que a função não foi encontrada ou algo nesse sentido. Carregando o pacote, esse erro é contornado. # carregar o pacote library(vegan) # carregar dados data(dune) # funcao do pacote vegan decostand(dune[1:6, 1:6], &quot;hell&quot;) ## Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere ## 1 1.0000000 0.0000000 0 0.0000000 0.0000000 0.0000000 ## 2 0.6123724 0.0000000 0 0.5000000 0.0000000 0.6123724 ## 3 0.0000000 0.5547002 0 0.7337994 0.0000000 0.3922323 ## 4 0.0000000 0.8164966 0 0.4082483 0.0000000 0.4082483 ## 5 0.5000000 0.0000000 0 0.0000000 0.7071068 0.5000000 ## 6 0.6324555 0.0000000 0 0.0000000 0.7745967 0.0000000 5. Usar o nome da função de forma errônea Esse erro não é tão comum, mas pode ser incômodo às vezes. Algumas funções possuem nomes no padrão “Camel Case,” i.e., com letras maiúsculas para no meio do nome da função. Isso às vezes pode confundir, ou ainda, as funções podem ou não ser separadas com ., como row.names() e colnames(). No capítulo de tidyverse 5, veremos que houve uma tentativa de padronização nos nomes das funções para “Snake Case,” i.e, todas as funções possuem letras minúsculas, com palavras separadas por underscore _. colsums(dune) ## Error in colsums(dune): could not find function &quot;colsums&quot; colSums(dune) ## Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu ## 16 48 5 36 21 13 15 1 ## Cirsarve Comapalu Eleopalu Elymrepe Empenigr Hyporadi Juncarti Juncbufo ## 2 4 25 26 2 9 18 13 ## Lolipere Planlanc Poaprat Poatriv Ranuflam Rumeacet Sagiproc Salirepe ## 58 26 48 63 14 18 20 11 ## Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp ## 54 9 47 4 49 10 2.4 Estrutura e manipulação de objetos O conhecimento sobre a estrutura e manipulação de objetos é fundamental para ter domínio e entendimento do funcionamento da linguagem R. Nesta seção, trataremos da estrutura e manipulação de dados no R, no que ficou conhecido como modo R Base, em contrapartida ao tidyverse, tópico do Capítulo 5. Abordaremos aqui temas chaves: 1) atributos de objetos, 2) manipulação de objetos unidimensionais e multidimensionais, 3) valores faltantes e especiais, 4) diretório de trabalho, e 5) importar, conferir e exportar dados. 2.4.1 Atributo dos objetos Quando fazemos atribuições de dados no R (&lt;-), os objetos gerados possuem três características. Nome: palavra que o R reconhece os dados atribuídos Conteúdo: dados em si Atributos: modos (natureza) e estruturas (organização) dos elementos Vamos explorar mais a fundo os modos e estruturas dos objetos. Vale ressaltar que isso é uma simplificação, pois há muitas classes de objetos como funções e saídas de funções que possuem outros atributos. Podemos verificar os atributos dos objetos com a função attributes(). # atributos attributes(dune) ## $names ## [1] &quot;Achimill&quot; &quot;Agrostol&quot; &quot;Airaprae&quot; &quot;Alopgeni&quot; &quot;Anthodor&quot; &quot;Bellpere&quot; ## [7] &quot;Bromhord&quot; &quot;Chenalbu&quot; &quot;Cirsarve&quot; &quot;Comapalu&quot; &quot;Eleopalu&quot; &quot;Elymrepe&quot; ## [13] &quot;Empenigr&quot; &quot;Hyporadi&quot; &quot;Juncarti&quot; &quot;Juncbufo&quot; &quot;Lolipere&quot; &quot;Planlanc&quot; ## [19] &quot;Poaprat&quot; &quot;Poatriv&quot; &quot;Ranuflam&quot; &quot;Rumeacet&quot; &quot;Sagiproc&quot; &quot;Salirepe&quot; ## [25] &quot;Scorautu&quot; &quot;Trifprat&quot; &quot;Trifrepe&quot; &quot;Vicilath&quot; &quot;Bracruta&quot; &quot;Callcusp&quot; ## ## $row.names ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; ## [16] &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; ## ## $class ## [1] &quot;data.frame&quot; 2.4.1.1 Modo dos objetos A depender da natureza dos elementos que compõem os dados e que foram atribuídos aos objetos, esses objetos podem ser, de forma simples um dos cinco modos: numérico do tipo inteiro (interger), numérico do tipo flutuante (double), texto (character), lógico (logical) ou complexo (complex). A atribuição de números no R podem gerar dois tipos de modos: interger para números inteiros e double para números flutuantes ou com decimais. # numerico double obj_numerico_double &lt;- 1 # modo mode(obj_numerico_double) ## [1] &quot;numeric&quot; # tipo typeof(obj_numerico_double) ## [1] &quot;double&quot; A título de praticidade, ambos são incorporados como o modo numeric, com o tipo double, a menos que especifiquemos que seja inteiro com o a letra L depois do número. # numerico interger obj_numerico_inteiro &lt;- 1L # modo mode(obj_numerico_inteiro) ## [1] &quot;numeric&quot; # tipo typeof(obj_numerico_inteiro) ## [1] &quot;integer&quot; Além de números, podemos atribuir textos, utilizando para isso aspas \"\". # caracter obj_caracter &lt;- &quot;a&quot; # atencao para as aspas # modo mode(obj_caracter) ## [1] &quot;character&quot; Em algumas situações, precisamos indicar a ocorrência ou não de um evento ou operação. Para isso, utilizamos as palavras reservadas (TRUE e FALSE), chamadas de variáveis booleanas, pois assumem apenas duas possibilidade: 0 ou 1. Devemos nos ater para o fato dessas palavras serem escritas com letras maiúsculas e sem aspas. # logico obj_logico &lt;- TRUE # maiusculas e sem aspas # modo mode(obj_logico) ## [1] &quot;logical&quot; Por fim, existe um modo pouco utilizado que cria números complexos (raiz de números negativos). # complexo obj_complexo &lt;- 1+1i # modo mode(obj_complexo) ## [1] &quot;complex&quot; Podemos verificar o modo dos objetos ou fazer a conversão entre esses modos com diversas funções. # verificar o modo dos objetos is.numeric() is.integer() is.character() is.logical() is.complex() # conversoes entre modos as.numeric() as.integer() as.character() as.logical() as.complex() 2.4.1.2 Estrutura dos objetos Uma vez entendido a natureza dos modos dos elementos dos objetos no R, podemos passar para o passo seguinte e entender como esses elementos são estruturados dentro dos objetos. Essa estruturação irá nos contar sobre a organização dos elementos, com relação aos modos e dimensionalidade da disposição dos elementos (Figura 2.3). De modo bem simples, os elementos podem ser estruturados em cinco tipos: Vetores e fatores: homogênio (um modo) e unidimensional (uma dimensão). Um tipo especial de vetor são os fatores, usados para designar variáveis categóricas Matrizes: homogênio (um modo) e bidimensional (duas dimensões) Arrays: homogênio (um modo) e multidimensional (mais de duas dimensões) Data frames: heterogêneo (mais de um modo) e bidimensional (duas dimensões) Listas: heterogêneo (mais de um modo) e unidimensional (uma dimensão) Figura 2.3: Estruturas de dados mais comuns de R: vetores, matrizes, arrays, listas e data frames. Adaptado de: Grolemund (2014). 2.4.1.2.1 Vetor Vetores representam o encadeamento de elementos numa sequência unidimensional. No Capítulo YY, vimos o conceito de variável aleatória e seus tidpos. No R, essas variáveis podem ser operacionalizadas como vetores. Dessa forma, essa estrutura de dados pode ser traduzida como medidas de uma variável numéricas (discretas ou contínuas), variável binária (booleana - TRUE e FALSE) ou descrição (informações em texto). Há diversas formas de se criar um vetor no R: Concatenando elementos com a função c() Criando sequências unitárias : ou com a função seq() Criando repetições com a função rep() “Colar” palavras com uma sequência numérica com a função paste() ou paste0() Amostrando aleatoriamente elementos com a função sample() # concatenar elementos numericos concatenar &lt;- c(15, 18, 20, 22, 18) # sequencia unitaria (x1:x2) sequencia &lt;- 1:10 # sequencia com diferentes espacamentos sequencia_esp &lt;- seq(from = 0, to = 100, by = 10) # repeticao repeticao &lt;- rep(x = c(TRUE, FALSE), times = 5) # cola palavra e sequencia numerica colar &lt;- paste(&quot;amostra&quot;, 1:5) # amostragem aleatoria amostragem &lt;- sample(1:100, 10) Como os vetores são homogênios, i.e., só comportam um modo, quando combinamos mais de modo no mesmo objeto ocorre uma dominância de modos. Existe, dessa forma, uma coerção dos elementos combinados para que todos fiquem iguais. Essa dominância segue essa ordem: DOMINANTE character &gt;&gt;&gt; double &gt;&gt;&gt; interger &gt;&gt;&gt; logical RECESSIVO Além disso, podemos utilizar as conversões listadas anteriormente para alterar os modos. Vamos exemplificar combinando os vetores criados anteriormente e convertendo-os. # coercao c(colar, amostragem) ## [1] &quot;amostra 1&quot; &quot;amostra 2&quot; &quot;amostra 3&quot; &quot;amostra 4&quot; &quot;amostra 5&quot; &quot;66&quot; ## [7] &quot;21&quot; &quot;53&quot; &quot;19&quot; &quot;81&quot; &quot;6&quot; &quot;3&quot; ## [13] &quot;59&quot; &quot;61&quot; &quot;62&quot; # conversao as.numeric(repeticao) ## [1] 1 0 1 0 1 0 1 0 1 0 2.4.1.2.2 Fator O fator representa medidas de uma variável categóricas, podendo ser nominal ou ordinal. É fundamental destacar que fatores no R devem ser entendidos como um vetor de interger, i.e., ele é composto por números inteiros representando os níveis da variável categórica. Para criar um fator no R usamos uma função específica factor(), na qual podemos especificar os níveis com o argumento level, ou fazemos uma conversão usando a função as.factor(). Trabalhar com fatores no R Base não é das tarefas mais agradáveis, sendo assim, no Capítulo 5 usamos a versão tidyverse usando o pacote forcats. # fatores nominal fator_nominal &lt;- factor(x = sample(c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;), 20, replace = TRUE), levels = c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;)) # fatores ordinal fator_ordinal &lt;- factor(x = sample(c(&quot;baixa&quot;, &quot;media&quot;, &quot;alta&quot;), 20, replace = TRUE), levels = c(&quot;baixa&quot;, &quot;media&quot;, &quot;alta&quot;), ordered = TRUE) # conversao fator &lt;- as.factor(x = sample(c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;), 20, replace = TRUE)) 2.4.1.2.3 Matriz A matrix representa dados no formato de tabela, com linhas e colunas. As linhas representam unidades amostrais (locais, transectos, parcelas) e as coluncas representam variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) ou descrições (informações em texto). Podemos criar matrizes no R de duas formas. A primeira delas dispondo elementos de um vetor em um certo número de linhas e colunas com a função matrix(), podendo preencher essa matriz com os elementos do vetor por linhas ou por colunas alterando o argumento byrow. # vetor ve &lt;- 1:12 # matrix - preenchimento por linhas - horizontal ma_row &lt;- matrix(data = ve, nrow = 4, ncol = 3, byrow = TRUE) # matrix - preenchimento por colunas - vertical ma_col &lt;- matrix(data = ve, nrow = 4, ncol = 3, byrow = FALSE) A segundo forma, combinando vetores, utilizando a função rbind para combinar veores por linha, i.e., vetor embaixo do outro, e cbind para combinar vetores por coluna, i.e., vetor ao lado do outro. # criar dois vetores vec_1 &lt;- c(1, 2, 3) vec_2 &lt;- c(4, 5, 6) # combinar por linhas - vertical - um embaixo do outro ma_rbind &lt;- rbind(vec_1, vec_2) # combinar por colunas - horizontal - um ao lado do outro ma_cbind &lt;- cbind(vec_1, vec_2) 2.4.1.2.4 Array O array representa combinação de tabelas, com linhas, colunas e dimensões. Essa combinação pode ser feita em múltiplas dimensões, mas apesar disso, geralmente é mais comum o uso em Ecologia para três dimensões, por exemplo: linhas (unidades amostrais), colunas (espécies) e dimensão (tempo). Isso gera um “cubo mágico,” onde podemos comparar, nesse caso, comunidades ao longo do tempo. Podemos criar arrays no R dispondo elementos de um vetor em um certo número de linhas, colunas e dimensões com a função array(). Em nosso exemplo, vamos compor 10 comunidades de 20 espécies ao longo de cinco períodos. # array ar &lt;- array(data = sample(c(0, 1), 1e3, rep = TRUE), dim = c(10, 20, 5)) 2.4.1.2.5 Data frame O data frame também representa dados no formato de tabela, com linhas e colunas, muito semelhante à matriz. Mas diferentemente das matrizes, os data frames comportam mais de um modo em suas colunas. Dessa forma, as linhas do data frame ainda representam unidades amostrais (locais, transectos, parcelas), mas as colunas agora podem representar descrições (informações em texto), variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) e variáveis categóricas (nominais ou ordinais). A forma mais simples de criar data frames no R é através da combinação de vetores. Essa combinação é feita com a função data.frame() e ocorre de forma horizontal, semelhante à função cbind(). Sendo assim, todos os vetores precisam ter o mesmo número de elementos, ou seja, o mesmo comprimento. Podemos ainda nomear as colunas de cada vetor. # criar tres vetores vec_ch &lt;- c(&quot;sp1&quot;, &quot;sp2&quot;, &quot;sp3&quot;) vec_nu &lt;- c(4, 5, 6) vec_fa &lt;- factor(c(&quot;campo&quot;, &quot;floresta&quot;, &quot;floresta&quot;)) # data.frame - combinar por colunas - horizontal - um ao lado do outro df &lt;- data.frame(vec_ch, vec_nu, vec_fa) # data.frame - nomear as colunas df &lt;- data.frame(especies = vec_ch, abundancia = vec_nu, vegetacao = vec_fa) 2.4.1.2.6 Lista A lista é tipo especial de vetor que aceita objetos como elementos. Ela é a estrutura de dados utilizada para agrupar objetos, e é geralmente a saída de muitas funções. Podemos criar listas através da função list(). Essa função funciona de forma semelhante à função c() para a criação de vetores, mas agora estamos concatenando objetos. Podemos ainda nomear os elementos (objetos) que estamos combinando. Um ponto interessante para entender data frames, é que eles são listas, em que todos os elementos (colunas) possuem o mesmo número de elementos, ou seja, mesmo comprimento. # lista lista &lt;- list(rep(1, 20), # vector factor(1, 1), # factor cbind(c(1, 2), c(1, 2))) # matrix # lista - nomear os elementos lista &lt;- list(vector = rep(1, 20), # vector factor = factor(1, 1), # factor matrix = cbind(c(1, 2), c(1, 2))) # matrix 2.4.1.2.7 Funções Uma última estrutura de objetos criados no R são as funções. Elas são objetos criados pelo usuário e reutilizados para fazer operações específicas. A criação de funções geralmente é um tópico tratado num segundo momento, quando o usuário de R adquire certo conhecimento da linguagem. Aqui abordarem apenas seu funcionamento básico, diferenciando sua estrutura para entendimento e sua diferenciação das demais estruturas. Vamos criar uma função simples que retorna a multiplicação de dois termos. # criar uma funcao multi &lt;- function(x, y){ mu &lt;- (x * y) return(mu) } # uso multi(42, 42) ## [1] 1764 2.4.2 Manipulação de objetos unidimensionais Vamos agora explorar formas de manipular elementos de objetos unidimensionais, ou seja, vetores, fatores e listas. A primeira forma de manipulação é através da indexação, utilizando os operadores []. Com a indexação podemos acessar elementos de vetores e fatores por sua posição. Iremos utilizar números, sequência de números ou operação booleanas para retornar partes dos vetores ou fatores. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -. # fixar a amostragem set.seed(42) # amostrar 10 elementos de uma sequencia ve &lt;- sample(seq(0, 2, .05), 10) ve ## [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90 0.20 # seleciona o quinto elemento ve[5] ## [1] 1.75 # seleciona os elementos de 1 a 5 ve[1:5] ## [1] 1.80 0.00 1.20 0.45 1.75 # retira o decimo elemento ve[-10] ## [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90 # retira os elementos 2 a 9 ve[-(2:9)] ## [1] 1.8 0.2 Podemos ainda fazer uma seleção condicional do vetor. Ao utilizarmos operadores relacionais, teremos como resposta um vetor lógico. Esse vetor lógico pode ser utilizado dentro da indexação para seleção de elementos. # quais valores sao maiores que 1? ve &gt; 1 ## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE # valores acima de 1 ve[ve &gt; 1] ## [1] 1.80 1.20 1.75 1.15 1.90 Além da indexação, temos algumas função que nos auxiliam em algumas operações com objetos unidimensionais, listadas na Tabela 2.2. Tabela 2.2: Funções para verificação e resumo de dados unidimensionais. Função Descrição max() Valor máximo min() Valor mínimo range() Amplitude length() Comprimento sum() Soma cumsum() Soma cumulativa prod() Produto sqrt() Raiz quadrada abs() Valor absoluto exp() Expoente log() Logaritmo natural log1p() Logaritmo natural mais 1 log(x + 1) log2() Logaritmo base 2 log10() Logaritmo base 10 mean() Média mean.weighted() Média ponderada var() Variância sd() Desvio Padrão mediam() Mediana quantile() Quantil quarters() Quartil round() Arredondamento sort() Ordenação order() Posição ordenada rev() Reverso unique() Únicos summary() Resumo estatístico cut() Divide variável contínua em fator pretty() Divide variável contínua em intervalos scale() Padronização e centralização sub() Substitui caracteres grep() Posição de caracteres any() Algum valor? all() Todos os valores? which() Quais valores? subset() Subconjunto ifelse() Operação condicional Para listas, também podemos usar a indexação [] para acessar ou retirar elementos. # lista li &lt;- list(elem1 = 1, elem2 = 2, elem3 = 3) # acessar o primeiro elemento li[1] ## $elem1 ## [1] 1 # retirar o primeiro elemento li[-1] ## $elem2 ## [1] 2 ## ## $elem3 ## [1] 3 Podemos ainda usar a indexação dupla [[]] para acessar os valores desses elementos. # acessar o valor do primeiro elemento li[[1]] ## [1] 1 # acessar o valor do segundo elemento li[[2]] ## [1] 2 Para listas nomeadas, podemos ainda utilizar o operador $ para acessar elementos pelo nome. # acessar o primeiro elemento li$elem1 ## [1] 1 E ainda podemos utilizar funções para medir o comprimento dessa lista, listar os nomes dos elementos ou ainda renomear os elementos: length() e names(). # comprimento length(li) ## [1] 3 # nomes names(li) ## [1] &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot; # renomear names(li) &lt;- paste0(&quot;elemento0&quot;, 1:3) li ## $elemento01 ## [1] 1 ## ## $elemento02 ## [1] 2 ## ## $elemento03 ## [1] 3 2.4.3 Manipulação de objetos multidimensionais Da mesma forma que para objetos unidimensionais, podemos manipular elementos de objetos multidimensionais, ou seja, matrizes, data frames e arrays. Novamente, a primeira forma de manipulação é através da indexação, utilizando os operadores []. Com a indexação podemos acessar elementos de matrizes, data frames e arrays por sua posição. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -. Entretanto, agora temos mais de uma dimensão na estruturação dos elementos dentro dos objetos. Assim, utilizamos números, sequência de números ou operação booleanas para retornar partes desses objetos, mas as dimensões têm de ser explicitadas e separadas por vírgulas para acessar linhas e colunas. Essa indexação funciona para matrizes e data frames. Para arrays, especificamos também as dimensões, também separadas por vírgulas para acessar essas dimensões. # matriz ma &lt;- matrix(1:12, 4, 3) ma ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ma[3, ] # linha 3 ## [1] 3 7 11 ma[, 2] # coluna 2 ## [1] 5 6 7 8 ma[1, 2] # elemento da linha 1 e coluna 2 ## [1] 5 ma[1, 1:2] # elementos da linha 1 e coluna 1 e 2 ## [1] 1 5 ma[1, c(1, 3)] # elementos da linha 1 e coluna 1 e 3 ## [1] 1 9 Para data frames, além de utilizar números e/ou sequências de números dentro do operador [] simples, assim como podemos utilizar o operador [[]] duplo para retornar apenas o valores de uma linha ou uma coluna. Se as colunas estiverem nomeadas, podemos utilizar o nome da coluna de interesse entre aspas dentro dos operadores [] (retornar coluna) e [[]] (retornar apenas os valores), assim como ainda podemos utilizar o operador $ para data frames. Essas últimas operações retornam um vetor, para o qual podemos fazer operações de vetores ou ainda atualizar o valor dessa coluna selecionada ou adicionar outra coluna. # criar tres vetores sp &lt;- paste(&quot;sp&quot;, 1:10, sep = &quot;&quot;) abu &lt;- 1:10 flo &lt;- factor(rep(c(&quot;campo&quot;, &quot;floresta&quot;), each = 5)) # data frame df &lt;- data.frame(sp, abu, flo) df ## sp abu flo ## 1 sp1 1 campo ## 2 sp2 2 campo ## 3 sp3 3 campo ## 4 sp4 4 campo ## 5 sp5 5 campo ## 6 sp6 6 floresta ## 7 sp7 7 floresta ## 8 sp8 8 floresta ## 9 sp9 9 floresta ## 10 sp10 10 floresta # [] - numeros df[, 1] ## [1] &quot;sp1&quot; &quot;sp2&quot; &quot;sp3&quot; &quot;sp4&quot; &quot;sp5&quot; &quot;sp6&quot; &quot;sp7&quot; &quot;sp8&quot; &quot;sp9&quot; &quot;sp10&quot; # [] - nome das colunas - retorna coluna df[&quot;flo&quot;] ## flo ## 1 campo ## 2 campo ## 3 campo ## 4 campo ## 5 campo ## 6 floresta ## 7 floresta ## 8 floresta ## 9 floresta ## 10 floresta # [[]] - nome das colunas - retorna apenas os valores df[[&quot;flo&quot;]] ## [1] campo campo campo campo campo floresta floresta floresta ## [9] floresta floresta ## Levels: campo floresta # $ funciona apenas para data frame df$sp ## [1] &quot;sp1&quot; &quot;sp2&quot; &quot;sp3&quot; &quot;sp4&quot; &quot;sp5&quot; &quot;sp6&quot; &quot;sp7&quot; &quot;sp8&quot; &quot;sp9&quot; &quot;sp10&quot; # operacao de vetors length(df$abu) ## [1] 10 # converter colunas df$abu &lt;- as.character(df$abu) mode(df$abu) ## [1] &quot;character&quot; # adicionar colunas set.seed(42) df$abu2 &lt;- sample(0:1, nrow(df), rep = TRUE) df ## sp abu flo abu2 ## 1 sp1 1 campo 0 ## 2 sp2 2 campo 0 ## 3 sp3 3 campo 0 ## 4 sp4 4 campo 0 ## 5 sp5 5 campo 1 ## 6 sp6 6 floresta 1 ## 7 sp7 7 floresta 1 ## 8 sp8 8 floresta 1 ## 9 sp9 9 floresta 0 ## 10 sp10 10 floresta 1 Podemos ainda fazer seleções condicionais para retornar linhas com valores que temos interesse, semelhante ao uso de filtro de uma planilha eletrônica. # selecionar linhas de uma matriz ou data frame df[df$abu &gt; 4, ] ## sp abu flo abu2 ## 5 sp5 5 campo 1 ## 6 sp6 6 floresta 1 ## 7 sp7 7 floresta 1 ## 8 sp8 8 floresta 1 ## 9 sp9 9 floresta 0 df[df$flo == &quot;floresta&quot;, ] ## sp abu flo abu2 ## 6 sp6 6 floresta 1 ## 7 sp7 7 floresta 1 ## 8 sp8 8 floresta 1 ## 9 sp9 9 floresta 0 ## 10 sp10 10 floresta 1 Além disso, há uma série de funções para conferência e manipulação de dados que listamos na Tabela 2.3. Tabela 2.3: Funções para verificação e resumo de dados multidimensionais. Função Descrição head() Mostra as primeiras 6 linhas tail() Mostra as últimas 6 linhas nrow() Mostra o número de linhas ncol() Mostra o número de colunas dim() Mostra o número de linhas e de colunas rownames() Mostra os nomes das linhas (locais) colnames() Mostra os nomes das colunas (variáveis) str() Mostra as classes de cada coluna (estrutura) summary() Mostra um resumo dos valores de cada coluna rowSums() Calcula a soma das linhas (horizontal) colSums() Calcula a soma das colunas (vertical) rowMeans() Calcula a média das linhas (horizontal) colMeans() Calcula a média das colunas (vertical) str() Mostra a estrutura dos dados table() Tabulação cruzada t() Matriz ou data frame transposto 2.4.4 Valores faltantes e especiais Valores faltantes e especiais são valores reservados que representam dados faltantes, indefinições matemáticas, infinitos e objetos nulos. NA (Not Available): significa dado faltante ou indisponível NaN (Not a Number): representa indefinições matemáticas Inf (Infinito): é um número muito grande ou um limite matemático NULL (Nulo): representa um objeto nulo, sendo útil para preenchimento em aplicações de programação # data frame com elemento NA df &lt;- data.frame(var1 = c(1, 4, 2, NA), var2 = c(1, 4, 5, 2)) df ## var1 var2 ## 1 1 1 ## 2 4 4 ## 3 2 5 ## 4 NA 2 # resposta booleana para elementos na is.na(df) ## var1 var2 ## [1,] FALSE FALSE ## [2,] FALSE FALSE ## [3,] FALSE FALSE ## [4,] TRUE FALSE # algum elemento é na? any(is.na(df)) ## [1] TRUE # remover as linhas com nas df_sem_na &lt;- na.omit(df) df_sem_na ## var1 var2 ## 1 1 1 ## 2 4 4 ## 3 2 5 # substituir nas por 0 df[is.na(df)] &lt;- 0 df ## var1 var2 ## 1 1 1 ## 2 4 4 ## 3 2 5 ## 4 0 2 # nan - not a number 0/0 ## [1] NaN log(-1) ## [1] NaN # limite matematico 1/0 ## [1] Inf # numero grande 10^310 ## [1] Inf # objeto nulo nulo &lt;- NULL nulo ## NULL 2.4.5 Diretório de trabalho O diretório de trabalho é o endereço da pasta (ou diretório) de onde o R irá importar ou exportar nossos dados. Podemos utilizar o próprio RStudio para tal tarefa, indo em Session &gt; Set Work Directory &gt; Choose Directory... ou simplesmente utilizar o atalho ctrl + shift + H. Podemos ainda utilizar as funções do R para definir o diretório. Para tanto, podemos navegar com o aplicativo de gerenciador de arquivos (e.g. Windows Explorer) até nosso diretório de interesse e copiar o endereço na barra superior. Voltamos para o R e colamos esse endereço entre aspas como um argumento da função setwd(). É fundamental destacar que em Sistemas Operacionais Windows é necessário inverter as barras (\\ por /). Aconselhamos ainda utilizar as funções getwd() para retornar o diretório definido na sessão do R, assim como as funções dir() ou list.files() para listagem dos arquivos no diretório, ambas medidas de conferência do diretório correto. # definir o diretorio de trabalho setwd(&quot;/home/mude/data/github/livro_r_ecologia/dados&quot;) # verificar o diretorio getwd() # listar os arquivos no diretorio dir() list.files() 2.4.6 Importar dados Uma das operações mais corriqueiras do R, antes de realizar alguma análise ou plotar um gráfico, é a de importar dados que foram tabulados numa planilha eletrônica e salvos no formato .csv, .txt ou .xlsx. Ao importar esse tipo de dado para o R, o formato que o mesmo assume, se nenhum parâmetro for especificado, é o da classe dataframe, prevendo que a planilha de dados possua colunas com diferentes modos. Existe diversas formas de importar dados para o R. Podemos importar utilizando o RStudio, indo na janela Environment (Figura 2.2 (3)) e clicar em “Importar Dataset.” Entretanto, aconselhamos o uso de funções que fiquem salvas em um script para aumentar a reprodutibilidade do mesmo. Dessa forma, as três principais funções para importar os arquivos nos três principais extensões (.csv, .txt ou .xlsx) são, respectivamente: read.csv(), read.table() e `openxlsx::read.xlsx()``, sendo o último do pacote openxlsx. # instalar pacote openxlsx install.packages(&quot;openxlsx&quot;) library(openxlsx) Para exemplificar como importar dados, vamos usar os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. 2018). Iremos fazer o download diretamente do site da fonte dos dados. Vamos antes escolher um diretório de trabalho com a função setwd(), e em seguida criar um diretório com a função dir.create() chamado “dados.” Em seguida, vamos mudar nosso diretóri para essa pasta e criar mais um diretório chamado “tabelas,” e por fim, definir esse diretório para que o conteúdo do download seja armazenado ali. # escolher um diretorio setwd(&quot;/home/mude/data/github/livro_r_ecologia&quot;) # criar um diretorio &#39;dados&#39; dir.create(&quot;dados&quot;) # escolher diretorio &#39;dados&#39; setwd(&quot;dados&quot;) # criar um diretorio &#39;tabelas&#39; dir.create(&quot;tabelas&quot;) # escolher diretorio &#39;tabelas&#39; setwd(&quot;tabelas&quot;) Agora podemos fazer o download do arquivo .zip e extrair as tabelas usando a função unzip() nesse mesmo diretório. # download download.file(url = &quot;https://esajournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fecy.2392&amp;file=ecy2392-sup-0001-DataS1.zip&quot;, destfile = &quot;atlantic_amphibians.zip&quot;, mode = &quot;wb&quot;) # unzip unzip(zipfile = &quot;atlantic_amphibians.zip&quot;) Agora podemos importar a tabela de dados com a função read.csv(), atribuindo ao objeto aa_locais. # importar tabela de locais aa_locais &lt;- read.csv(&quot;dados/tabelas/ATLANTIC_AMPHIBIANS_sites.csv&quot;) Esse arquivo foi criado com separador de decimais sendo . e separador de colunas sendo ,. Caso tivesse sido criado com separador de decimais sendo , e separador de colunas sendo ;, usaríamos a função read.csv2(). Para outros formatos, basta usar as outras funções apresentadas, atendando-se para os argumentos específicos de cada uma. 2.4.7 Conferência de dados importados Uma vez importados os dados para o R, geralmente antes de inicarmos qualquer manipulação, visualização ou análise de dados, fazemos a conferência desses dados. Para isso, podemos utilizar as funções listadas na Tabela 2.3. # primeiras linhas head(aa_locais) ## id reference_number species_number record sampled_habitat active_methods ## 1 amp1001 1001 19 ab fo,ll as ## 2 amp1002 1002 16 co fo,la,ll as ## 3 amp1003 1002 14 co fo,la,ll as ## 4 amp1004 1002 13 co fo,la,ll as ## 5 amp1005 1003 30 co fo,ll,br as ## 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; ## passive_methods complementary_methods period month_start year_start ## 1 pt &lt;NA&gt; mo,da,tw,ni 9 2000 ## 2 pt &lt;NA&gt; mo,da,tw,ni 12 2007 ## 3 pt &lt;NA&gt; mo,da,tw,ni 12 2007 ## 4 pt &lt;NA&gt; mo,da,tw,ni 12 2007 ## 5 &lt;NA&gt; &lt;NA&gt; mo,da,ni 7 1988 ## 6 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA NA ## month_finish year_finish effort_months country state state_abbreviation ## 1 1 2002 16 Brazil Piau\\xed BR-PI ## 2 5 2009 17 Brazil Cear\\xe1 BR-CE ## 3 5 2009 17 Brazil Cear\\xe1 BR-CE ## 4 5 2009 17 Brazil Cear\\xe1 BR-CE ## 5 8 2001 157 Brazil Cear\\xe1 BR-CE ## 6 NA NA NA Brazil Cear\\xe1 BR-CE ## municipality site ## 1 Canto do Buriti Parque Nacional Serra das Confus\\xf5es ## 2 S\\xe3o Gon\\xe7alo do Amarante Dunas ## 3 S\\xe3o Gon\\xe7alo do Amarante Jardim Bot\\xe2nico\\xa0Municipal de\\xa0Bauru ## 4 S\\xe3o Gon\\xe7alo do Amarante Ta\\xedba ## 5 Baturit\\xe9 Serra de Baturit\\xe9 ## 6 Quebrangulo Reserva Biol\\xf3gica de Pedra Talhada ## latitude longitude coordinate_precision altitude temperature precipitation ## 1 -8.680000 -43.42194 gm 543 24.98 853 ## 2 -3.545527 -38.85783 dd 15 26.53 1318 ## 3 -3.574194 -38.88869 dd 29 26.45 1248 ## 4 -3.515250 -38.91880 dd 25 26.55 1376 ## 5 -4.280556 -38.91083 gm 750 21.35 1689 ## 6 -9.229167 -36.42806 &lt;NA&gt; 745 20.45 1249 # ultimas linhas tail(aa_locais) ## id reference_number species_number record sampled_habitat ## 1158 amp2158 1389 3 co &lt;NA&gt; ## 1159 amp2159 1389 9 co &lt;NA&gt; ## 1160 amp2160 1389 6 co &lt;NA&gt; ## 1161 amp2161 1389 1 co &lt;NA&gt; ## 1162 amp2162 1389 2 co &lt;NA&gt; ## 1163 amp2163 1389 2 co &lt;NA&gt; ## active_methods passive_methods complementary_methods period month_start ## 1158 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## 1159 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## 1160 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## 1161 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## 1162 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## 1163 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA ## year_start month_finish year_finish effort_months country state ## 1158 NA NA NA NA Argentina Misiones ## 1159 NA NA NA NA Argentina Misiones ## 1160 NA NA NA NA Argentina Misiones ## 1161 NA NA NA NA Argentina Misiones ## 1162 NA NA NA NA Argentina Misiones ## 1163 NA NA NA NA Argentina Misiones ## state_abbreviation municipality site ## 1158 AR-N Manuel Belgrano Comandante Andresito ## 1159 AR-N Posadas Posadas ## 1160 AR-N Montecarlo Montecarlo ## 1161 AR-N San Pedro Refugio Mocon\\xe1 ## 1162 AR-N Caingu\\xe1s Balneario Municipal Cu\\xf1\\xe1 Pir\\xfa ## 1163 AR-N Ober\\xe1 Chacra San Juan de Dios ## latitude longitude coordinate_precision altitude temperature ## 1158 -25.66944 -54.04556 gms 251 19.94 ## 1159 -27.45333 -55.89250 gms 105 21.30 ## 1160 -26.56889 -53.60889 gms 597 18.35 ## 1161 -27.14083 -53.92611 gms 202 19.92 ## 1162 -27.08722 -54.95278 gms 213 21.04 ## 1163 -27.47333 -55.17194 gms 254 20.67 ## precipitation ## 1158 1780 ## 1159 1768 ## 1160 1954 ## 1161 1850 ## 1162 1553 ## 1163 1683 # numero de linhas e colunas nrow(aa_locais) ## [1] 1163 ncol(aa_locais) ## [1] 25 dim(aa_locais) ## [1] 1163 25 # nome das linhas e colunas rownames(aa_locais) colnames(aa_locais) # estrutura dos dados str(aa_locais) # resumo dos dados summary(aa_locais) # verificar nas any(is.na(aa_locais)) which(is.na(aa_locais)) # remover as linhas com nas aa_locais_na &lt;- na.omit(aa_locais) 2.4.8 Exportar dados Uma vez realizado as operações de manipulação ou tendo dados que foram analisados e armazenados num objeto no formato de data frame ou matriz, podemos exportar esses dados do R para o diretório que definimos anteriormente. Para tanto, podemos utilizar funções de escrita de dados, como write.csv(), write.table() e openxlsx::write.xlsx(). Dois pontos são fundamentais: 1. o nome do arquivo tem de estar entre aspas e no final dele deve constar a extensão que pretendemos que o arquivo tenha; 2. é interessante utilizar os argumentos row.names = FALSE e quote=FALSE, para que o arquivo escrito não tenha o nome das linhas ou aspas em todas as células, respectivamente. # exportar dados na extensao .csv write.csv(aa_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.csv&quot;, row.names = FALSE, quote = FALSE) # exportar dados na extensao .txt write.table(aa_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.txt&quot;, row.names = FALSE, quote = FALSE) # exportar dados na extensao .xlsx openxlsx::write.xlsx(aa_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.xlsx&quot;, row.names = FALSE, quote = FALSE) 2.5 Exercícios Use o R para verificar o resultado da operação 7 + 7 ÷ 7 + 7 x 7 - 7. Verifique através do R se 3x2³ é maior que 2x3². Crie dois objetos (qualquer nome) com os valores 100 e 300. Multiplique esses objetos (função prod()) e atribuam ao objeto mult. Faça o logaritmo natural (função log()) do objeto mult e atribuam ao objeto ln. Quantos pacotes existem no CRAN nesse momento? Execute essa combinação no Console: nrow(available.packages(repos = \"http://cran.r-project.org\")). Instale o pacote tidyverse do CRAN. Escolha números para jogar na mega-sena usando o R, nomeando o objeto como mega. Lembrando: são 6 valores de 1 a 60 e atribuam a um objeto. Crie um fator chamado tr, com dois níveis (“cont” e “trat”) para descrever 100 locais de amostragem, 50 de cada tratamento. O fator deve ser dessa forma cont, cont, cont, ...., cont, trat, trat, ...., trat. Crie uma matriz chamada ma, resultante da disposição de um vetor composto por 10000 valores aleatórios entre 0 e 10. A matriz deve conter 100 linhas e ser disposta por colunas. Crie um data frame chamado df, resultante da composição desses vetores: id: 1:50 sp: sp01, sp02, ..., sp49, sp50 ab: 50 valores aleatórios entre 0 a 5 Crie uma lista com os objetos criados anteriormente: mega, tr, ma e df. Selecione os elmentos ímpares do objeto tr, e atribua ao objeto tr_impar. Selecione as linhas com ids pares do objeto df, e atribua ao objeto df_ids_par. Faça uma amostragem de 10 linhas do objeto df, e atribua ao objeto df_amos10. 2.6 Para se aprofundar Listamos a seguir livros e links com material que recomendamos para seguir com sua aprendizagem em R e tidyverse. 2.6.1 Livros Mayer F. P., Bonat W. H., Zeviani W. M., Krainski E. T., Ribeiro Jr. P. J. 2018. Estatística Computacional com R. [http://cursos.leg.ufpr.br/ecr/index.html] Zeviani W. M. 2019. Manual de Planejamento e Análise de Experimentos com R. [http://leg.ufpr.br/~walmes/mpaer/] Curso-R. 2021. Ciência de Dados em R. [https://livro.curso-r.com/] Adler J. 2012. R in a Nutshell: A Desktop Quick Reference. 2 ed. O’Reilly Media. Burns P. 2011. The R Inferno. [https://www.burns-stat.com/pages/Tutor/R_inferno.pdf] Cotton R. 2013. Learning R: A Step-by-Step Function Guide to Data Analysis. O’Reilly Media. Crawley MJ. 2012. The R Book. 2 ed. Wiley. Davies TM. 2016. The Book of R: A First Course in Programming and Statistics. No Starch Press. Douglas A, Roos D, Mancini F, Couto A, Lusseau D. An Introduction to R. 2021 [https://intro2r.com/] Engel C. 2019. Introduction to R. [https://cengel.github.io/R-intro/] Gillespie C., Lovelace R, 2016. Efficient R programming. O’Reilly Media. [https://bookdown.org/csgillespie/efficientR/] Grolemund G. 2014. Hands-On Programming with R. O’Reilly Media. Holmes S, Huber W. 2019. Modern Statistics for Modern Biology. Cambridge University Press. [https://www.huber.embl.de/msmb/] Irizarry RA, Love MI. 2016. Data Analysis for the Life Sciences with R. Chapman and Hall/CRC. James G, Witten D, Hastie T, Tibshirani R. 2013. An Introduction to Statistical Learning: with Applications in R. 2 ed. Springer. [http://faculty.marshall.usc.edu/gareth-james/ISL/] Kabacoff RI. 2015. R in Action: Data analysis and graphics with R. 2 ed. Manning. Lander JP. 2017. R for Everyone: Advanced Analytics and Graphics. Addison-Wesley Professional. Matloff N. 2011. The Art of R Programming: A Tour of Statistical Software Design. No Starch Press. Long JD, Teetor P. 2019. R Cookbook.2 ed. O’Reilly Media. [https://rc2e.com/] Wickham H. 2019. Advanced R. 2 ed. Chapman and Hall/CRC. [https://adv-r.hadley.nz/] Wickham H. 2015. R Packages: Organize, Test, Document, and Share Your Code. O’Reilly Media. [https://r-pkgs.org/] 2.6.2 Links Materiais sobre R R resources (free courses, books, tutorials, &amp; cheat sheets) Data Science for Ecologists and Environmental Scientists "]]
